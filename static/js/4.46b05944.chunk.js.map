{"version":3,"sources":["hoc/WithAuthRedirect.tsx","Components/Profile/ProFile.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileData.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","WithAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","ProfileStatus","editMode","status","activateEditMode","setState","deActivateEditMode","updateStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","this","autoFocus","onBlur","onChange","onDoubleClick","React","Component","ProfileData","userProfile","isOwner","toEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","k","key","contactTitle","contactValue","Contact","ProfileDataReduxForm","reduxForm","form","handleSubmit","error","onSubmit","className","styles","formSummaryError","Field","name","component","Input","placeholder","validate","FieldRequired","type","Textarea","style","width","margin","ProfileInfo","savePhoto","saveProfile","useState","setEditMode","Preloader","src","photos","small","avaUserDefault","alt","photoFile","target","files","length","initialValues","formData","then","Post","c","item","message","likes","MyPosts","memo","addPost","postsData","s","myPosts","NewPostReduxForm","newPost","posts","post","id","maxLength","maxLengthCreator","profilePage","PostActionCreator","profileActions","addPostActionCreator","newText","Profile","profile","MyPostsContainer","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","PureComponent","compose","getUserProfileTC","getStatusTC","updateStatusTC","updatePhotoTC","saveProfileTC","withRouter"],"mappings":"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","file":"static/js/4.46b05944.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype mapStatePropsType = { isAuth: boolean }\r\nlet mapStateToPropsForRedirect = (state: AppStateType): mapStatePropsType => ({\r\n    isAuth: state.auth.isAuth\r\n}as mapStatePropsType)\r\n\r\nexport function WithAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<mapStatePropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    return  connect<mapStatePropsType,{},WCP,AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"ProFile_profile__27zqB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__2mbhM\",\"posts\":\"MyPosts_posts__3vLoQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1b-2_\"};","import React from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\ntype LocalStateType = {\r\n    editMode: boolean\r\n    status:string\r\n}\r\n\r\n\r\nexport class ProfileStatus extends React.Component<ProfileStatusType, LocalStateType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    }\r\n    deActivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        })\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n            this.setState({\r\n                status: e.currentTarget.value\r\n            })\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<LocalStateType>) {\r\n        if(prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status:this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.editMode\r\n                    ? <input\r\n                        autoFocus={true}\r\n                        onBlur={this.deActivateEditMode}\r\n                        value={this.state.status}\r\n                        onChange={this.onStatusChange}\r\n                    />\r\n                    : <span onDoubleClick={this.activateEditMode}>{this.props.status} </span>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}","import {contactsType, UserProfileType} from '../../../redux/profile-reducer';\r\nimport React from 'react';\r\n\r\ntype ProfileDataType = {\r\n    userProfile: UserProfileType\r\n    isOwner: boolean\r\n    toEditMode: () => void\r\n}\r\nexport const ProfileData = (props: ProfileDataType) => {\r\n    const {userProfile,isOwner,toEditMode} = props;\r\n    return (\r\n        <div>\r\n            {isOwner && <button onClick={toEditMode}> Update Profile </button>}\r\n            <div>FullName: {userProfile.fullName}</div>\r\n            <div>Looking for a job: {userProfile.lookingForAJob ? 'yes' : 'no'}</div>\r\n            <div>Skills : {userProfile.lookingForAJobDescription} </div>\r\n            <div>About me: {userProfile.aboutMe}</div>\r\n            <div>\r\n                Contacts: {\r\n                Object\r\n                    .keys(userProfile.contacts)\r\n                    .map((k) => {\r\n                        return <Contact key={k} contactTitle={k}\r\n                                        contactValue={userProfile.contacts[k as keyof contactsType]}/>\r\n                    })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact = (props: ContactType) => {\r\n    return <div>{props.contactTitle} : {props.contactValue}</div>\r\n}","import React from 'react';\r\nimport {UserProfileType} from '../../../redux/profile-reducer';\r\nimport {reduxForm, Field, InjectedFormProps} from 'redux-form';\r\nimport {Input, Textarea} from '../../../common/FormsControls/FormsControls';\r\nimport {FieldRequired} from '../../../utils/Validator';\r\nimport styles from '../../../common/FormsControls/FormControl.module.css';\r\n\r\ntype ProfileDataFormType = {\r\n    userProfile: UserProfileType\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<UserProfileType, ProfileDataFormType> & ProfileDataFormType> = (props) => {\r\n    const {userProfile, handleSubmit, error} = props;\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button> Save</button>\r\n                {error && <div className={styles.formSummaryError}>{error}</div>}\r\n                <div>\r\n                    Your name : <Field name={'fullName'} component={Input}\r\n                                       placeholder={'Full Name'} validate={[FieldRequired]}\r\n                />\r\n                </div>\r\n                <div>\r\n                    Looking for a job? <Field name={'lookingForAJob'} component='input' type='checkbox'\r\n                />\r\n                </div>\r\n                <div>\r\n                    Skills : <Field name={'lookingForAJobDescription'}\r\n                                    component={Textarea}\r\n                />\r\n                </div>\r\n                <div>\r\n                    About Me: <Field name={'aboutMe'}\r\n                                     component={Textarea}\r\n                />\r\n                </div>\r\n                <div>\r\n                    <b>Contacts :</b> {Object.keys(userProfile.contacts).map(key => {\r\n                    return <div key={key}>\r\n                        <div>{key} :</div>\r\n                        <Field name={'contacts.' + key} component='input'/>\r\n                    </div>\r\n                })\r\n                }\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<UserProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataReduxForm","import React, {useState} from 'react';\r\nimport {UserProfileType} from '../../../redux/profile-reducer';\r\nimport {Preloader} from '../../../common/Preloader/Preloader';\r\nimport avaUserDefault from '../../../assets/img/user-png-2.png';\r\nimport {ProfileStatus} from './ProfileStatus';\r\nimport {ProfileData} from './ProfileData';\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\n\r\n\r\ntype ProfileInfoType = {\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: UserProfileType) => Promise<any>\r\n}\r\nlet style = {\r\n    width: '60px',\r\n    margin: '40px'\r\n}\r\n\r\nexport const    ProfileInfo = (props: ProfileInfoType) => {\r\n    const {userProfile, status, updateStatus, isOwner, savePhoto, saveProfile} = props;\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!userProfile) return <Preloader/>\r\n\r\n    const onPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const photoFile = e.target.files;\r\n        if (photoFile && photoFile.length) {\r\n            savePhoto(photoFile[0])\r\n        }\r\n    }\r\n    const toEditMode = () => setEditMode(true)\r\n\r\n    const onSubmit = (formData: UserProfileType) => {\r\n        //из санки можно вернуть промис, далее setEditMode только в случае удачного выполнения промиса\r\n        saveProfile(formData).then(()=>setEditMode(false))\r\n    }\r\n    return (<>\r\n            <div>\r\n                <img style={style}\r\n                     src={userProfile.photos.small || avaUserDefault}\r\n                     alt=\"userPhoto\"\r\n                />\r\n                {isOwner && <input type=\"file\" onChange={onPhotoSelected}/>}\r\n                <ProfileStatus status={status} updateStatus={updateStatus}/>\r\n\r\n                {editMode\r\n                    ? <ProfileDataReduxForm\r\n                        initialValues={userProfile}\r\n                        userProfile={userProfile}\r\n                        onSubmit={onSubmit}/>\r\n                    : <ProfileData toEditMode={toEditMode}\r\n                                   isOwner={isOwner}\r\n                                   userProfile={userProfile}/>}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport c from './Post.module.css';\r\ntype propsType = {\r\n    message:string\r\n    likes: number\r\n}\r\nexport function Post(props: propsType) {\r\n    return (\r\n        <div>\r\n            <div className={c.item}>\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/ru/9/9f/Safari-icon.png\" alt=\"icon\"/>\r\n                {props.message}\r\n            </div>\r\n            {props.likes} like\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport {PostDataType} from '../../../redux/profile-reducer';\r\nimport {Post} from './Post/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {FieldRequired, maxLengthCreator} from '../../../utils/Validator';\r\nimport {Textarea} from '../../../common/FormsControls/FormsControls';\r\n\r\n\r\ntype MyPostsType = {\r\n    postsData: Array<PostDataType>\r\n    addPost: (newText: string) => void\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n    const {addPost, postsData} = props\r\n    const handleSubmit = (formData: NewPostFormDataType) => addPost(formData.newPost)\r\n\r\n    return (\r\n        <div className={s.myPosts}>\r\n            <NewPostReduxForm onSubmit={handleSubmit}/>\r\n            <div className={s.posts}>\r\n                {\r\n                    postsData.map(post => <Post key={post.id} likes={post.likes} message={post.message}/>)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nconst maxLength = maxLengthCreator(20)\r\ntype NewPostFormDataType = { newPost: string }\r\n\r\nconst NewPostForm: React.FC<InjectedFormProps<NewPostFormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                component={Textarea}\r\n                name='newPost'\r\n                placeholder='New post'\r\n                validate={[FieldRequired, maxLength]}\r\n            />\r\n            <button> Send</button>\r\n        </form>\r\n    )\r\n}\r\nconst NewPostReduxForm = reduxForm<NewPostFormDataType>({form: 'NewPostForm'})(NewPostForm)","import React from 'react';\r\nimport {PostDataType, profileActions} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\ntype Maintype = {}\r\n\r\ntype MapStateToPropsType = {\r\n    postsData: Array<PostDataType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n    PostActionCreator: (newPostText: string) => void,\r\n}\r\ntype MyPostContainerType = Maintype & MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst MyPostContainer = (props: MyPostContainerType) => {\r\n    const {postsData, PostActionCreator} = props\r\n\r\n    const addPost = (newText:string) => {\r\n        PostActionCreator(newText)\r\n    }\r\n\r\n    return <MyPosts\r\n        postsData={postsData}\r\n        addPost={addPost}\r\n\r\n    />\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, Maintype, AppStateType>(mapStateToProps,\r\n    {\r\n        PostActionCreator: profileActions.addPostActionCreator,\r\n    })\r\n(MyPostContainer);\r\n\r\n","import React from 'react';\r\nimport c from './ProFile.module.css';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {UserProfileType} from '../../redux/profile-reducer';\r\n\r\ntype ProfilePropsType ={\r\n    userProfile: UserProfileType | null\r\n    status:string\r\n    isOwner: boolean\r\n    updateStatus:(status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: UserProfileType) => Promise<any>\r\n}\r\n\r\nexport function Profile(props:ProfilePropsType) {\r\n    return (\r\n        <div className={c.profile}>\r\n            <ProfileInfo\r\n                userProfile={props.userProfile}\r\n                updateStatus={props.updateStatus}\r\n                status={props.status}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    saveProfileTC,\r\n    updatePhotoTC,\r\n    updateStatusTC,\r\n    UserProfileType\r\n} from '../../redux/profile-reducer';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/WithAuthRedirect';\r\n\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType;\r\n// PathParamsType типы ожидаемых параметров & ProfileContainerType тип нашей контейнерной компоненты\r\ntype ProfileContainerTypeWithRouter = RouteComponentProps<PathParamsType> & ProfileContainerType\r\n\r\nclass ProfileContainer extends React.PureComponent<ProfileContainerTypeWithRouter> {\r\n\r\n    refreshProfile() {\r\n        let userId: null | number = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // componentDidMount - метод жизненного цикла контейнерной компоненты,  вызывается сразу после монтирования (то есть, вставки компонента в DOM).Это хорошее место для создания  запросов и т.д.\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerTypeWithRouter>, prevState: Readonly<{}>) {\r\n\r\n        // componentDidUpdate - метод жизненного цикла контейнерной компоненты,  вызывается при каждом изменении Props или State\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         userProfile={this.props.userProfile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         savePhoto={this.props.savePhoto}\r\n                         saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype MapStateToPropsType = {\r\n    userProfile: UserProfileType | null\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n};\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: number | null) => void\r\n    getStatus: (userId: number | null) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile: UserProfileType) => Promise<any>\r\n};\r\n\r\nlet MapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        userProfile: state.profilePage.userProfile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(MapStateToProps, {\r\n        getUserProfile: getUserProfileTC,\r\n        getStatus: getStatusTC,\r\n        updateStatus: updateStatusTC,\r\n        savePhoto: updatePhotoTC,\r\n        saveProfile: saveProfileTC,\r\n    }),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n\r\n\r\n//ProfileInfo => Profile => ProfileContainer (my comp.)=> AuthRedirectComponent - 'hoc redirect login' => WithUrlDataContainerComponent(comp. withRouter ) => WithUrlDataContainerComponentContainer2' ( with connect )"],"sourceRoot":""}